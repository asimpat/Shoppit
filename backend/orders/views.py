import requests
from django.conf import settings
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.response import Response
from rest_framework import status
from .models import Order
from .serializers import OrderSerializer
import uuid
from django.urls import reverse
from .paystack import checkout
from django.contrib import messages
from products.models import Product
from django.shortcuts import redirect


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_order(request):
    serializer = OrderSerializer(data=request.data)
    if serializer.is_valid():
        order = serializer.save(user=request.user)
        return Response(OrderSerializer(order).data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_orders(request):
    orders = Order.objects.filter(user=request.user).order_by('-created_at')
    serializer = OrderSerializer(orders, many=True)
    return Response(serializer.data)



@api_view(['GET'])
@permission_classes([IsAuthenticated])
def order_detail(request, order_id):
    try:
        order = Order.objects.get(id=order_id, user=request.user)
    except Order.DoesNotExist:
        return Response({'error': 'Order not found'}, status=status.HTTP_404_NOT_FOUND)
    serializer = OrderSerializer(order)
    return Response(serializer.data)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_paystack_checkout_session(request, product_id):
    # can check for error incase id is not in DB or is incorrect or id matches 
    product = Product.objects.get(id=product_id)
    purchase_id = f"purchase_{uuid.uuid4()}"

    # Callback is the page or url where the user gets redirected to when a sucessfull purchance was made(paystack redirect the user to a url)
    # /payment-success/2/
    payment_success_url = reverse(
        'payment-success', kwargs={'product_id': product_id})

    # http://domain.com/payment-success/2/
    callback_url = f"{request.scheme}://{request.get_host()}{payment_success_url}"

    checkout_data = {
        "email": request.user.email,
        "amount": int(product.price * 100),  # in kobo (â‚¦2500)
        "currency": "NGN",
        "channels": ["card", "bank_transfer", "bank", "ussd", "qr", "mobile_money"],
        "reference": purchase_id,  # generated by developer
        "callback_url": callback_url,
        "metadata": {
            "product_id": product_id,
            "user_id": request.user.id,
            "purchase_id": purchase_id,
        },
        "label": f"Checkout For {product.name}"
    }

    status, url_or_error = checkout(checkout_data)
    if status:
        return Response({'url': url_or_error}, status=200)
    else:
        return Response({'error': url_or_error}, status=400)


@api_view(['GET'])
@permission_classes([AllowAny])
def payment_success(request, product_id):
    return redirect(f'{settings.FRONTEND_URL}/payment-success?product_id={product_id}')


@api_view(['GET'])
@permission_classes([AllowAny])
def payment_failed(request, product_id):
    return redirect(f'{settings.FRONTEND_URL}/payment-failed?product_id={product_id}')
